// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        /* check to see if address space is greater than
         * or equal to 24,576, in which case we access
         * the keyboard
         */
        And(a=address[13], b=address[14], out=keyboard);
        Not(in=keyboard, out=nkeyboard);

        /* screen will be true when address[13] == 0, 
         * and also address[14] == 1,
         * which corresponds to an address space greater
         * than or equal to 16,384, and less than 24,576,
         * which corresponds to the case in which we access
         * the screen
         */
        And(a=address[14], b=nkeyboard, out=screen);
        Not(in=screen, out=nscreen);

        /*
         * the name "loadRAM" is not ideal because the screen and
         * keyboard are also stored in RAM in addition to RAM16 chip
         */
        And(a=load, b=nscreen, out=loadRAM);
        And(a=load, b=screen, out=loadScreen);

        // RAM16K takes an address with 14 bits
        RAM16K(in=in, address=address[0..13], load=loadRAM, out=ramOut);
        // Screen takes an address with 13 bits
        Screen(in=in, address=address[0..12], load=loadScreen, out=screenOut);
        // keyboard outputs a 16 bscreenOut value
        Keyboard(out=keyOut);

        Mux16(a=ramOut, b=screenOut, sel=screen, out=ramOrScreenOut);
        Mux16(a=ramOrScreenOut, b=keyOut, sel=keyboard, out=out);
}
